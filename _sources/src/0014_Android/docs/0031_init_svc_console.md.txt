# init svc console

通知栏移植提示console打开了

# 参考文档

* [android 创建service root权限执行脚本](https://blog.csdn.net/zlcchina/article/details/12947139)

# 简述

Android应用程序怎样启动让init进程知道我们想运行那个进程呢？

答案是设置系统属性"ctl.start"，把"ctl.start"设置为你要运行的Service，假设为"xxx"，Android系统将会帮你运行"ctl.start"系统属性中指定的Service。那么运行结果init进程将会将会写入命名为"init.svc.+Service名称"的属性中，也就是"init.svc.xxx"属性，应用程序可以参考查阅这个值来确定Service执行的情况。

# 通知栏串口终端提示

Serial console enabled

```
* frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
  * final void finishBooting()
    * showConsoleNotificationIfActive();
      * private void showConsoleNotificationIfActive()
        * if (!SystemProperties.get("init.svc.console").equals("running"))
        * String title = mContext.getString(com.android.internal.R.string.console_running_notification_title);
          * frameworks/base/core/res/res/values/strings.xml
            * <string name="console_running_notification_title">Serial console enabled</string>
```

getprop init.svc.console

```
running
```

# init.rc

out/target/product/k62v1_64_bsp/system/etc/init/hw/init.rc

```
service console /system/bin/sh
    class core
    console
    disabled
    user shell
    group shell log readproc
    seclabel u:r:shell:s0
    setenv HOSTNAME console

on property:ro.debuggable=1
    # Give writes to anyone for the trace folder on debug builds.
    # The folder is used to store method traces.
    chmod 0773 /data/misc/trace
    # Give reads to anyone for the window trace folder on debug builds.
    chmod 0775 /data/misc/wmtrace
    # Give reads to anyone for the accessibility trace folder on debug builds.
    chmod 0775 /data/misc/a11ytrace

on init && property:ro.debuggable=1
    start console
```

getprop | grep ro.debuggable

```
[ro.debuggable]: [1]
```

out/target/product/k62v1_64_bsp/system/build.prop

```
ro.debuggable=1
```

build/make/core/main.mk

```makefile
## user/userdebug ##

user_variant := $(filter user userdebug,$(TARGET_BUILD_VARIANT))
enable_target_debugging := true
tags_to_install :=
ifneq (,$(user_variant))
  # Target is secure in user builds.
  ADDITIONAL_SYSTEM_PROPERTIES += ro.secure=1
  ADDITIONAL_SYSTEM_PROPERTIES += security.perf_harden=1

  ifeq ($(user_variant),user)
    ADDITIONAL_SYSTEM_PROPERTIES += ro.adb.secure=1
  endif

  ifeq ($(user_variant),userdebug)
    # Pick up some extra useful tools
    tags_to_install += debug
  else
    # Disable debugging in plain user builds.
    enable_target_debugging :=
  endif

  # Disallow mock locations by default for user builds
  ADDITIONAL_SYSTEM_PROPERTIES += ro.allow.mock.location=0

else # !user_variant
  # Turn on checkjni for non-user builds.
  ADDITIONAL_SYSTEM_PROPERTIES += ro.kernel.android.checkjni=1
  # Set device insecure for non-user builds.
  ADDITIONAL_SYSTEM_PROPERTIES += ro.secure=0
  # Allow mock locations by default for non user builds
  ADDITIONAL_SYSTEM_PROPERTIES += ro.allow.mock.location=1
endif # !user_variant

ifeq (true,$(strip $(enable_target_debugging)))
  # Target is more debuggable and adbd is on by default
  ADDITIONAL_SYSTEM_PROPERTIES += ro.debuggable=1
  # Enable Dalvik lock contention logging.
  ADDITIONAL_SYSTEM_PROPERTIES += dalvik.vm.lockprof.threshold=500
else # !enable_target_debugging
  # Target is less debuggable and adbd is off by default
  ADDITIONAL_SYSTEM_PROPERTIES += ro.debuggable=0
endif # !enable_target_debugging
```
