# OTG Keyboard

通过Type-C OTG模拟键盘

# 参考文档

* [pizero-usb-hid-keyboard](https://github.com/raspberrypisig/pizero-usb-hid-keyboard)
* [Turn Your Raspberry Pi Zero into a USB Keyboard (HID)](https://randomnerdtutorials.com/raspberry-pi-zero-usb-keyboard-hid/)
* [Raspberry Pi Zero emulate mouse](https://stackoverflow.com/questions/59156906/raspberry-pi-zero-emulate-mouse)
* [Linux USB gadget configured through configfs](https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt)
* [0010_Kernel_USB_Gadget_Configfs_Interface.pdf](refers/0010_Kernel_USB_Gadget_Configfs_Interface.pdf)
* [gadget_hid.txt](https://www.kernel.org/doc/Documentation/usb/gadget_hid.txt)

# hid

https://github.com/raspberrypisig/pizero-usb-hid-keyboard/blob/master/rpi-hid.sh

```bash
#!/usr/bin/env bash
# Snippet from https://github.com/girst/hardpass-sendHID/blob/master/README.md . In which, the following notice was left:

# this is a stripped down version of https://github.com/ckuethe/usbarmory/wiki/USB-Gadgets - I don't claim any rights

modprobe libcomposite

cd /sys/kernel/config/usb_gadget/

mkdir -p g1
cd g1
echo 0x1d6b > idVendor # Linux Foundation
echo 0x0104 > idProduct # Multifunction Composite Gadget
echo 0x0100 > bcdDevice # v1.0.0
echo 0x0200 > bcdUSB # USB2

# Instantiate English language strings
mkdir -p strings/0x409
echo "deadbeef01234567890" > strings/0x409/serialnumber
echo "raspberrypi" > strings/0x409/manufacturer
echo "Generic USB Keyboard" > strings/0x409/product

# Create function instances. Note that multiple function instances of the same type must have a unique extension
N="usb0"
mkdir -p functions/hid.$N
echo 1 > functions/hid.usb0/protocol
echo 1 > functions/hid.usb0/subclass
echo 8 > functions/hid.usb0/report_length
echo -ne \\x05\\x01\\x09\\x06\\xa1\\x01\\x05\\x07\\x19\\xe0\\x29\\xe7\\x15\\x00\\x25\\x01\\x75\\x01\\x95\\x08\\x81\\x02\\x95\\x01\\x75\\x08\\x81\\x03\\x95\\x05\\x75\\x01\\x05\\x08\\x19\\x01\\x29\\x05\\x91\\x02\\x95\\x01\\x75\\x03\\x91\\x03\\x95\\x06\\x75\\x08\\x15\\x00\\x25\\x65\\x05\\x07\\x19\\x00\\x29\\x65\\x81\\x00\\xc0 > functions/hid.usb0/report_desc

# Create a configuration instance
C=1
mkdir -p configs/c.$C/strings/0x409
# Create English language strings and write in a description for this device configuration 
echo "Config $C: ECM network" > configs/c.$C/strings/0x409/configuration 
echo 250 > configs/c.$C/MaxPower 

# Bind each of our function instances to this configuration
ln -s functions/hid.$N configs/c.$C/

# Verify which UDC drivers are available. Attach the created gadget device to our UDC driver.
ls /sys/class/udc > UDC
```

不禁要问hid设备属性具体代表什么: https://elixir.bootlin.com/linux/v4.0/source/Documentation/ABI/testing/configfs-usb-gadget-hid

```
What:        /config/usb-gadget/gadget/functions/hid.name
Date:        Nov 2014
KernelVersion:    3.19
Description:
        The attributes:

        protocol    - HID protocol to use
        report_desc    - blob corresponding to HID report descriptors
                except the data passed through /dev/hidg<N>
        report_length    - HID report length
        subclass    - HID device subclass to use
```

* attributes
  * protocol - HID protocol to use
  * report_desc - blob corresponding to HID report descriptors except the data passed through /dev/hidg<N>
  * report_length - HID report length
  * subclass - HID device subclass to use
* report_desc: https://www.kernel.org/doc/Documentation/usb/gadget_hid.txt
  ```CPP
  /* hid descriptor for a keyboard */
  static struct hidg_func_descriptor my_hid_data = {
    .subclass        = 0, /* No subclass */
    .protocol        = 1, /* Keyboard */
    .report_length        = 8,
    .report_desc_length    = 63,
    .report_desc        = {
        0x05, 0x01,    /* USAGE_PAGE (Generic Desktop)           */  // 0x05, 0x01
        0x09, 0x06,    /* USAGE (Keyboard)                       */  // 0x09, 0x06
        0xa1, 0x01,    /* COLLECTION (Application)               */  // 0xa1, 0x01
        0x05, 0x07,    /*   USAGE_PAGE (Keyboard)                */  // 0x05, 0x07
        0x19, 0xe0,    /*   USAGE_MINIMUM (Keyboard LeftControl) */  // 0x19, 0xe0
        0x29, 0xe7,    /*   USAGE_MAXIMUM (Keyboard Right GUI)   */  // 0x29, 0xe7
        0x15, 0x00,    /*   LOGICAL_MINIMUM (0)                  */  // 0x15, 0x00
        0x25, 0x01,    /*   LOGICAL_MAXIMUM (1)                  */  // 0x25, 0x01
        0x75, 0x01,    /*   REPORT_SIZE (1)                      */  // 0x75, 0x01
        0x95, 0x08,    /*   REPORT_COUNT (8)                     */  // 0x95, 0x08
        0x81, 0x02,    /*   INPUT (Data,Var,Abs)                 */  // 0x81, 0x02
        0x95, 0x01,    /*   REPORT_COUNT (1)                     */  // 0x95, 0x01
        0x75, 0x08,    /*   REPORT_SIZE (8)                      */  // 0x75, 0x08
        0x81, 0x03,    /*   INPUT (Cnst,Var,Abs)                 */  // 0x81, 0x03
        0x95, 0x05,    /*   REPORT_COUNT (5)                     */  // 0x95, 0x05
        0x75, 0x01,    /*   REPORT_SIZE (1)                      */  // 0x75, 0x01
        0x05, 0x08,    /*   USAGE_PAGE (LEDs)                    */  // 0x05, 0x08
        0x19, 0x01,    /*   USAGE_MINIMUM (Num Lock)             */  // 0x19, 0x01
        0x29, 0x05,    /*   USAGE_MAXIMUM (Kana)                 */  // 0x29, 0x05
        0x91, 0x02,    /*   OUTPUT (Data,Var,Abs)                */  // 0x91, 0x02
        0x95, 0x01,    /*   REPORT_COUNT (1)                     */  // 0x95, 0x01
        0x75, 0x03,    /*   REPORT_SIZE (3)                      */  // 0x75, 0x03
        0x91, 0x03,    /*   OUTPUT (Cnst,Var,Abs)                */  // 0x91, 0x03
        0x95, 0x06,    /*   REPORT_COUNT (6)                     */  // 0x95, 0x06
        0x75, 0x08,    /*   REPORT_SIZE (8)                      */  // 0x75, 0x08
        0x15, 0x00,    /*   LOGICAL_MINIMUM (0)                  */  // 0x15, 0x00
        0x25, 0x65,    /*   LOGICAL_MAXIMUM (101)                */  // 0x25, 0x65
        0x05, 0x07,    /*   USAGE_PAGE (Keyboard)                */  // 0x05, 0x07
        0x19, 0x00,    /*   USAGE_MINIMUM (Reserved)             */  // 0x19, 0x00
        0x29, 0x65,    /*   USAGE_MAXIMUM (Keyboard Application) */  // 0x29, 0x65
        0x81, 0x00,    /*   INPUT (Data,Ary,Abs)                 */  // 0x81, 0x00
        0xc0        /* END_COLLECTION                            */  // 0xc0
    }
  };
  ```
  * 需要注意的描述符是描述最终鼠标传输的数据，其中的INPUT、OUTPUT会转成对应IN、OUT Endpoint的Buffer长度
    * https://github.com/ZengjfOS/USB/blob/master/docs/0008_HID_Keyboard.md
      * INPUT: 1 * 8 bit + 1 * 8 bit + 3 * 8 bit = 5 * 8 bit = 5 byte
        * EP1INBUF[]长度为5，观察赋值就可以看出来；
      * OUTPUT: 5 bit + 3 bit = 1 byte
        * EP1OUTBUF[]长度为1，观察赋值就可看出来；
  * 这个描述符相当于告诉Host端怎么去映射出自己的IN、OUT Endpoint的Buffer长度，从而确保两边的数据通信结构没问题
  * 上面的描述符：
    * INPUT: 1 * 8 bit + 1 * 8 bit + 6 * 8 bit = 8 * 8 bit = 8 byte
    * OUTPUT: 5 bit + 3 bit = 1 byte

# hid_gadget_test

* https://www.kernel.org/doc/Documentation/usb/gadget_hid.txt
  * Sample code::
    * /* hid_gadget_test */
      * 其中使用select + read从命令行读取数据
        * select从终端获取到一行以后才会触发一次read
* select等待数据，read获取数据
  ```cpp
  #include <stdio.h>
  #include <stdlib.h>
  #include <sys/time.h>
  #include <sys/types.h>
  #include <unistd.h>
  
  #define STDIN 0
  #define BUF_LEN 512
  
  int main()
  {
      char buf[BUF_LEN];
      int cmd_len;
      int i = 0;
      int fd = -1;
  
      //1. 初始化fd集合
      fd_set fds;           //定义fd集合
      FD_ZERO(&fds);        //清空fd集合
      FD_SET(STDIN,&fds);   //添加STDIN
  
      //2. 监控fd集合 - 遍历集合方式
      int ret  = select(STDIN + 1, &fds, NULL, NULL, NULL);
      if(ret <= -1)
      {
          perror("select");
          exit(-1);
      }
  
      //3. 判断STDIN的读属性是否发生变化
      if(FD_ISSET(STDIN, &fds)) {
          printf("someone input a char!\n");
  
          cmd_len = read(STDIN, buf, BUF_LEN - 1);
          printf("recv report(%d): ", cmd_len);
          for (i = 0; i < cmd_len; i++)
              printf(" %02x", buf[i]);
  
          printf("\n");
      }
  
      //4. 清空集合
      FD_CLR(STDIN,&fds);
      FD_ZERO(&fds);
  
      return 0;
  }
  ```
* 使用如下命令进入键盘模拟环境
  * ./hid-gadget-test /dev/hidg0 keyboard
    ```
    a                 # 输出小写 a
    --enter           # 输出回车
    --left-shift a    # 输出大写 A
    ```
