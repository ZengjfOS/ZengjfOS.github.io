# Process Isolation

进程隔离原理

# 参考文档

* [0031_MMU_Cache_VA_PA.md](0031_MMU_Cache_VA_PA.md)
* [20 张图揭开「内存管理」的迷雾，瞬间豁然开朗](https://zhuanlan.zhihu.com/p/152119007)
* [漫谈操作系统5 -- 基础知识（进程隔离）](https://blog.csdn.net/Alex___Zhao/article/details/74091785)

# 进程隔离

进程隔离是操作系统内核对于资源管理和安全增强的特性，其最终的目的是对于操作系统内核能够更好的控制程序对资源的申请和使用，并且控制此程序可访问资源的范围并限定此程序异常之后能够影响的范围。现有的小型嵌入式系统内核比如UC/OS 2, LittleKernel如果没有而外的库的帮助（例如LK的uthread库），都是不支持进程隔离的，其所有的任务运行在一个大的对每个任务都可见的内存空间之上，这么做的优点是其可以运行在没有MMU的处理器之上比如ARM的Cortex M处理器甚至是51单片机之上，但是其缺点是每个被操作系统调度的任务是没有机制隔离其资源的，而系统的安全性由于无法将单个任务崩溃造成的影响控制在此任务之内，所以整个系统的安全性和稳定性都非常的低。

# 硬件要求

进程隔离对硬件有一些基本的要求，其中最主要的硬件是MMU（Memory Management Unit内存管理单元），有时候ARM Cortex M之上的MPU也能达到类似的功能，但是其功能很弱，无法做到地之间的翻译，而只能在物理内存地址之上划定线性的范围。

MMU的作用简单用一句话概括就是将线性地址翻译为物理地址， 对于理解操作系统内核来说我们并不需要了解太多MMU的细节，但是如果我们要实现一个内核，这部分知识是根据处理器体系结构的不同而不同的。

每个进程分配独立的一套「虚拟地址」，大家自己玩自己的地址就行，互不干涉。至于虚拟地址最终怎么落到物理内存里，对进程来说是透明的，操作系统已经把这些都安排的明明白白了。操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。进程调度的时候，会重置对应进程的虚拟映射表到MMU。

在Linux操作系统中，虚拟地址空间的内部又被分为内核空间和用户空间两部分，不同位数的系统，地址空间的范围也不同。32位系统的内核空间占用1G，位于最高处，剩下的3G是用户空间；每个进程都各自有独立的虚拟内存，但是每个虚拟内存中的内核地址，其实关联的都是相同的物理内存。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。

我们通过系统调用如fork创建进程时，其会在进程描述结构体内集成内存虚拟地址空间的结构体，其内容包含的是当前进程的地址空间页表，当操作系统进行任务切换时会改写CPU的MMU页表基地址寄存器为当前被运行进程的页表基地址，从而达成切换地址空间范围到相应的进程内存范围的目的。
