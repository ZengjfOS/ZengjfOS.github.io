# keystore cts apk build

源代码编译cts apk，便于处理cts测试、分析问题

# 参考文档

* [Android cts测试命令](https://blog.csdn.net/holdrise/article/details/8448013)
* [使用am instrument验证CTS问题](https://blog.csdn.net/fchyang/article/details/123920799#:~:text=%E4%BD%BF%E7%94%A8am%20instrument%E9%AA%8C%E8%AF%81CTS%E9%97%AE%E9%A2%98%201%20adb%20install%20%E2%80%9Ccts%20apk%E2%80%9C%EF%BC%8C%E6%AF%94%E5%A6%82CtsMediaV2TestCases%20apk,instrument%20-r%20-e%20class%20%22class_name%23method_name%22%20-w%20%22instrumentation%22%EF%BC%8Cinstrumentation%E5%9C%A8%E6%B5%8B%E8%AF%95apk%E7%9A%84AndroidManifest.xml%E9%87%8C%E6%9C%89%E5%A3%B0%E6%98%8E%E3%80%82%20)

# build

* source build/envsetup.sh
* lunch [your project]-userdebug
* make cts -j16
  * 报错编译不过
* mmm cts/tests/tests/keystore/
  ```
  frameworks/base/core/java/android/os/PackageTagsList.java:111: info: Method can be invoked as a "in" operator from Kotlin: `contains` (this is usually desirable; just make sure it makes sense for this type of object) [KotlinOperator]
  [ 97% 1027/1053] //cts/common/device-side/util-axt:compatibility-device-util-axt kotlinc [common]
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/AccessibilityNodeInfoUtils.kt:23:22: warning: 'InstrumentationRegistry' is deprecated. Deprecated in Java
  import androidx.test.InstrumentationRegistry
                       ^
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/AccessibilityNodeInfoUtils.kt:26:5: warning: 'InstrumentationRegistry' is deprecated. Deprecated in Java
      InstrumentationRegistry.getInstrumentation().uiAutomation.rootInActiveWindow
      ^
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/AccessibilityNodeInfoUtils.kt:26:29: warning: 'getInstrumentation(): Instrumentation!' is deprecated. Deprecated in Java
      InstrumentationRegistry.getInstrumentation().uiAutomation.rootInActiveWindow
                              ^
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/AccessibilityNodeInfoUtils.kt:39:14: warning: unnecessary safe call on a non-null receiver of type AccessibilityNodeInfo
          child?.depthFirstSearch(condition)?.let { return it }
               ^
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/AccessibilityNodeInfoUtils.kt:58:63: warning: no cast needed
  val AccessibilityNodeInfo.textAsString: String? get() = (text as CharSequence?).toString()
                                                                ^
  [ 97% 1030/1053] //cts/common/device-side/util-axt:compatibility-device-util-axt javac [common]
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/SystemUtil.java:271: warning: non-varargs call of varargs method with inexact argument type for last parameter;
          runWithShellPermissionIdentity(automan, runnable, null /* permissions */);
                                                            ^
    cast to String for a varargs call
    cast to String[] for a non-varargs call and to suppress this warning
  cts/common/device-side/util-axt/src/com/android/compatibility/common/util/BitmapUtils.java:147: warning: non-varargs call of varargs method with inexact argument type for last parameter;
          return (Bitmap) methodGetBitmap.invoke(wallpaperManager, null);
                                                                   ^
    cast to Object for a varargs call
    cast to Object[] for a non-varargs call and to suppress this warning
  2 warnings
  [100% 1053/1053] Copy: out/host/linux-x86/cts/android-cts/testcases/CtsKeystoreTestCases.apk
  
  #### build completed successfully (03:39 (mm:ss)) ####
  ```

# 测试

* adb install out/host/linux-x86/cts/android-cts/testcases/CtsKeystoreTestCases.apk
* adb shell
  * pm list instrumentation
    ```
    instrumentation:android.keystore.cts/androidx.test.runner.AndroidJUnitRunner (target=android.keystore.cts)
    ```
  * am instrument -e class android.keystore.cts.KeyAttestationTest#testRsaAttestation_DeviceLocked -w -r android.keystore.cts/androidx.test.runner.AndroidJUnitRunner
    * 测试单项用例
  * am instrument -w -r android.keystore.cts/androidx.test.runner.AndroidJUnitRunner
    * 整包测试
      * 可以用于提取单项测试用例
  * am instrument -r -e class android.keystore.cts.KeyAttestationTest -w android.keystore.cts/androidx.test.runner.AndroidJUnitRunner
    * 运行整个类的测试单元，时间比较久，4分钟
      ```
      INSTRUMENTATION_STATUS_CODE: 0
      INSTRUMENTATION_STATUS: class=android.keystore.cts.KeyAttestationTest
      INSTRUMENTATION_STATUS: current=14
      INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
      INSTRUMENTATION_STATUS: numtests=15
      INSTRUMENTATION_STATUS: stream=
      INSTRUMENTATION_STATUS: test=testRsaAttestation_TooLargeChallenge
      INSTRUMENTATION_STATUS_CODE: 1
      INSTRUMENTATION_STATUS: class=android.keystore.cts.KeyAttestationTest
      INSTRUMENTATION_STATUS: current=14
      INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
      INSTRUMENTATION_STATUS: numtests=15
      INSTRUMENTATION_STATUS: stream=.
      INSTRUMENTATION_STATUS: test=testRsaAttestation_TooLargeChallenge
      INSTRUMENTATION_STATUS_CODE: 0
      INSTRUMENTATION_STATUS: class=android.keystore.cts.KeyAttestationTest
      INSTRUMENTATION_STATUS: current=15
      INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
      INSTRUMENTATION_STATUS: numtests=15
      INSTRUMENTATION_STATUS: stream=
      INSTRUMENTATION_STATUS: test=testVersionParser
      INSTRUMENTATION_STATUS_CODE: 1
      INSTRUMENTATION_STATUS: class=android.keystore.cts.KeyAttestationTest
      INSTRUMENTATION_STATUS: current=15
      INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
      INSTRUMENTATION_STATUS: numtests=15
      INSTRUMENTATION_STATUS: stream=.
      INSTRUMENTATION_STATUS: test=testVersionParser
      INSTRUMENTATION_STATUS_CODE: 0
      INSTRUMENTATION_RESULT: stream=

      Time: 228.126

      OK (15 tests)


      INSTRUMENTATION_CODE: -1
      ```
  * am instrument -r -e class android.keystore.cts.KeyAttestationTest#testRsaAttestation -w android.keystore.cts/androidx.test.runner.AndroidJUnitRunner
    ```
    INSTRUMENTATION_STATUS: class=android.keystore.cts.KeyAttestationTest
    INSTRUMENTATION_STATUS: current=1
    INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
    INSTRUMENTATION_STATUS: numtests=1
    INSTRUMENTATION_STATUS: stream=
    android.keystore.cts.KeyAttestationTest:
    INSTRUMENTATION_STATUS: test=testRsaAttestation
    INSTRUMENTATION_STATUS_CODE: 1
    INSTRUMENTATION_STATUS: class=android.keystore.cts.KeyAttestationTest
    INSTRUMENTATION_STATUS: current=1
    INSTRUMENTATION_STATUS: id=AndroidJUnitRunner
    INSTRUMENTATION_STATUS: numtests=1
    INSTRUMENTATION_STATUS: stream=.
    INSTRUMENTATION_STATUS: test=testRsaAttestation
    INSTRUMENTATION_STATUS_CODE: 0
    INSTRUMENTATION_RESULT: stream=
    
    Time: 148.052
    
    OK (1 test)
    
    
    INSTRUMENTATION_CODE: -1
    ```
    * 这个测试要跑很久，因为里面要跑很多中方式的加密

# challenge

* 参考文档
  * [What is a challenge password?](https://serverfault.com/questions/266232/what-is-a-challenge-password)
    * The "challenge password" requested as part of the CSR generation, is different from the passphrase used to encrypt the secret key (requested at key generation time, or when a plaintext key is later encrypted - and then requested again each time the SSL-enabled service that uses it starts up).
  * [What's the use of challenge password in build-key-server and build-key from Easy-RSA?](https://security.stackexchange.com/questions/77028/whats-the-use-of-challenge-password-in-build-key-server-and-build-key-from-easy/77082#77082)
  * [5.4.1 Challenge password](https://www.rfc-editor.org/rfc/rfc2985#page-16)
* 是加密、签名用到的随机数，防止有密钥权限的人（但是没有challenge password）私自使用密钥

# testRsaAttestation

* `E keystore2:     0: While generating Key without explicit attestation key.`
  * 自己用的红米手机没有写google key？有点坑

```
08-23 11:36:28.924 30895 30912 I TestRunner: started: testRsaAttestation(android.keystore.cts.KeyAttestationTest)
08-23 11:36:28.926 30895 30912 D CtsTestRunListener: Total memory  : 268435456
08-23 11:36:28.926 30895 30912 D CtsTestRunListener: Used memory   : 2701488
08-23 11:36:28.926 30895 30912 D CtsTestRunListener: Free memory   : 265733968
08-23 11:36:28.926 30895 30912 D CtsTestRunListener: java.io.tmpdir is:/data/user/0/android.keystore.cts/cache
08-23 11:36:28.926 30895 30912 D CtsTestRunListener: About to .exec df
08-23 11:36:28.933 30895 30912 D CtsTestRunListener: .exec returned
08-23 11:36:28.933 30895 30912 D CtsTestRunListener: Stream reader created
08-23 11:36:28.962 30895 30912 D CtsTestRunListener: In finally
08-23 11:36:28.962 30895 30912 D CtsTestRunListener: Now executing : android.keystore.cts.KeyAttestationTest
08-23 11:36:28.963 30895 30912 I AndroidKeyStoreTest: RSA key attestation with: challenge [] / includeValidityDates true / keySize 512 / purposes 12 / paddingModes [PKCS1] / devicePropertiesAttestation true
08-23 11:36:29.012   490   490 I beanpodkeymaster: BeanpodKeymaster begin generate key
08-23 11:36:29.087   468   468 I [mTEE]  :  come into the TZ_VFS_OPEN function
08-23 11:36:29.091   468   468 D [mTEE]  :  pathname = /vendor/thh/ta/d91f322ad5a441d5955110eda3272fc0.ta
08-23 11:36:29.091   468   468 D [mTEE]  :  flags = 0 mode = 0 retval = 5
08-23 11:36:29.093   468   468 D [mTEE]  :  come into the TZ_VFS_CLOSE function
08-23 11:36:29.093   468   468 D [mTEE]  :  fd = 5
08-23 11:36:29.094   468   468 D [mTEE]  :  retVal = 0
08-23 11:36:29.095   468   468 I [mTEE]  :  come into the TZ_VFS_OPEN function
08-23 11:36:29.095   468   468 D [mTEE]  :  pathname = /vendor/thh/ta/d91f322ad5a441d5955110eda3272fc0.ta
08-23 11:36:29.095   468   468 D [mTEE]  :  flags = 0 mode = 0 retval = 5
08-23 11:36:29.096   468   468 D [mTEE]  :  come into the TZ_VFS_LSEEK function
08-23 11:36:29.096   468   468 D [mTEE]  :  come into the TZ_VFS_LSEEK function
08-23 11:36:29.097   468   468 D [mTEE]  :  come into the TZ_VFS_LSEEK function
08-23 11:36:29.098   468   468 D [mTEE]  :  come into the TZ_VFS_READ function
08-23 11:36:29.101   468   468 D [mTEE]  :  come into the TZ_VFS_CLOSE function
08-23 11:36:29.101   468   468 D [mTEE]  :  fd = 5
08-23 11:36:29.101   468   468 D [mTEE]  :  retVal = 0
08-23 11:36:29.145   468   468 D [mTEE]  :  come into the TZ_VFS_SETPROP function
08-23 11:36:29.145   468   468 D [mTEE]  :  proplength = 9
08-23 11:36:29.145   468   468 D [mTEE]  :  1st key = rpmb.flag
08-23 11:36:29.145   468   468 D [mTEE]  :  2nd val = ok
08-23 11:36:29.146   468   468 D [mTEE]  :  retVal = 0
08-23 11:36:29.664   490   490 I beanpodkeymaster: cmd:0 Received 4 byte response
08-23 11:36:29.664   490   490 E beanpodkeymaster: Response of size 4 contained error code -66
08-23 11:36:29.664   490   490 E beanpodkeymaster: Failed to send cmd 0 err: -66
08-23 11:36:29.666   489   489 W BpBinder: Slow Binder: BpBinder transact took 654 ms, interface=android.hardware.security.keymint.IKeyMintDevice, code=3 oneway=false
08-23 11:36:29.666   489   489 E keystore2: keystore2::error: In generate_key.
08-23 11:36:29.666   489   489 E keystore2: 
08-23 11:36:29.666   489   489 E keystore2: Caused by:
08-23 11:36:29.666   489   489 E keystore2:     0: While generating Key without explicit attestation key.
08-23 11:36:29.666   489   489 E keystore2:     1: Error::Km(ErrorCode(-66))
08-23 11:36:29.668 30895 30912 W BpBinder: Slow Binder: BpBinder transact took 679 ms, interface=android.system.keystore2.IKeystoreSecurityLevel, code=2 oneway=false
08-23 11:36:29.670 30895 30912 I AndroidKeyStoreTest: key attestation with device IDs not supported; test skippe
```

代码处理流程

```
* cts/tests/tests/keystore/src/android/keystore/cts/KeyAttestationTest.java
  └── public void testRsaAttestation() throws Exception
      ├── int[] keySizes
      │   ├── 512
      │   ├── 768
      │   └── 1024
      ├── byte[][] challenges
      │   ├── new byte[0], // empty challenge
      │   ├── "challenge".getBytes(), // short challenge
      │   └── new byte[128] // long challenge
      ├── int[] purposes
      │   ├── PURPOSE_SIGN | PURPOSE_VERIFY,
      │   └── PURPOSE_ENCRYPT | PURPOSE_DECRYPT,
      ├── String[][] encryptionPaddingModes
      │   ├── ENCRYPTION_PADDING_NONE
      │   ├── ENCRYPTION_PADDING_RSA_OAEP,
      │   ├── ENCRYPTION_PADDING_RSA_PKCS1,
      │   ├── ENCRYPTION_PADDING_RSA_OAEP,
      │   └── ENCRYPTION_PADDING_RSA_PKCS1,
      ├── String[][] signaturePaddingModes = {
      │   ├── SIGNATURE_PADDING_RSA_PKCS1,
      │   ├── SIGNATURE_PADDING_RSA_PSS,
      │   ├── SIGNATURE_PADDING_RSA_PKCS1,
      │   └── SIGNATURE_PADDING_RSA_PSS,
      ├── boolean[] devicePropertiesAttestationValues
      │   ├── true 
      │   └── false
      └── for (boolean devicePropertiesAttestation : devicePropertiesAttestationValues)
          └── for (int keySize : keySizes)
              └── for (byte[] challenge : challenges)
                  └── for (int purpose : purposes)
                      ├── if (isEncryptionPurpose(purpose))
                      │   └── testRsaAttestations(keySize, challenge, purpose, encryptionPaddingModes, devicePropertiesAttestation);
                      └── else
                          └── testRsaAttestations(keySize, challenge, purpose, signaturePaddingModes, devicePropertiesAttestation);
                              └── private void testRsaAttestations(int keySize, byte[] challenge, int purpose, String[][] paddingModes, boolean devicePropertiesAttestation) throws Exception 
                                  └── for (String[] paddings : paddingModes)
                                      ├── testRsaAttestation(challenge, true /* includeValidityDates */, keySize, purpose, paddings, devicePropertiesAttestation);
                                      │   └── private void testRsaAttestation(byte[] challenge, boolean includeValidityDates, int keySize, int purposes, String[] paddingModes, boolean devicePropertiesAttestation)
                                      │       ├── String keystoreAlias = "test_key";
                                      │       ├── KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(keystoreAlias, purposes).setKeySize(keySize).setDigests(DIGEST_NONE, DIGEST_SHA256, DIGEST_SHA512).setAttestationChallenge(challenge).setDevicePropertiesAttestationIncluded(devicePropertiesAttestation);
                                      │       ├── if (isSignaturePurpose(purposes))
                                      │       │   └── builder.setSignaturePaddings(paddingModes);
                                      │       ├── generateKeyPair(KEY_ALGORITHM_RSA, builder.build());
                                      │       │   ├── KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm, "AndroidKeyStore");
                                      │       │   ├── keyPairGenerator.initialize(spec);
                                      │       │   └── keyPairGenerator.generateKeyPair();
                                      │       ├── KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
                                      │       ├── keyStore.load(null);
                                      │       ├── try
                                      │       │   ├── Certificate certificates[] = keyStore.getCertificateChain(keystoreAlias);
                                      │       │   ├── verifyCertificateChain(certificates, false /* expectStrongBox */);
                                      │       │   ├── X509Certificate attestationCert = (X509Certificate) certificates[0];
                                      │       │   ├── Attestation attestation = Attestation.loadFromCertificate(attestationCert);
                                      │       │   ├── checkRsaKeyDetails(attestation, keySize, purposes, ImmutableSet.copyOf(paddingModes));
                                      │       │   ├── checkKeyUsage(attestationCert, purposes);
                                      │       │   └── checkKeyIndependentAttestationInfo(challenge, purposes, startTime, includeValidityDates, devicePropertiesAttestation, attestation);
                                      │       └── finally
                                      │           └── keyStore.deleteEntry(keystoreAlias);
                                      └── testRsaAttestation(challenge, false /* includeValidityDates */, keySize, purpose, paddings, devicePropertiesAttestation);
```
